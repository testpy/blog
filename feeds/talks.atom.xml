<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>testpy</title><link href="/" rel="alternate"></link><link href="/feeds/talks.atom.xml" rel="self"></link><id>/</id><updated>2013-11-05T00:00:00+02:00</updated><entry><title>10 pragmatic guidelines to maximize test usefulness</title><link href="/10-pragmatic-guidelines-to-maximize-test-usefulness/" rel="alternate"></link><updated>2013-11-05T00:00:00+02:00</updated><author><name>Dan Claudiu Pop</name></author><id>tag:,2013-11-05:10-pragmatic-guidelines-to-maximize-test-usefulness/</id><summary type="html">&lt;iframe width="420" height="315" src="//www.youtube.com/embed/91-LiEb3sPE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;ABSTRACT&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;WHAT MAKES GOOD TESTS?&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tests should be as simple as possible.&lt;/li&gt;
&lt;li&gt;Tests should run as quickly as possible.&lt;/li&gt;
&lt;li&gt;Tests should avoid coupling with other tests.&lt;/li&gt;
&lt;li&gt;Tests should communicate intent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CANONICAL FORM OF A TEST&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Setup pre-conditions.&lt;/li&gt;
&lt;li&gt;Perform operation under test.&lt;/li&gt;
&lt;li&gt;Make assertions.&lt;/li&gt;
&lt;li&gt;Benefits of following canonical form.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;TESTING TOOLS&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Factories (instead of fixtures).&lt;/li&gt;
&lt;li&gt;Coverage.py&lt;/li&gt;
&lt;li&gt;django-nose + multiprocess&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;GUIDELINES&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tests should be as simple as possible.&lt;/li&gt;
&lt;li&gt;Each test method tests one thing, and one thing only.&lt;/li&gt;
&lt;li&gt;Only set up the minimum needed pre-conditions for your test.&lt;/li&gt;
&lt;li&gt;Create your pre-conditions explicitly - don't use shared helper methods outside your module.&lt;/li&gt;
&lt;li&gt;Name your TestCase methods to indicate what they actually test.&lt;/li&gt;
&lt;li&gt;Use factories, not fixtures.&lt;/li&gt;
&lt;li&gt;Use django.tests.TestCase instead of unittest2.TestCase&lt;/li&gt;
&lt;li&gt;Create mixins, not shared TestCases.&lt;/li&gt;
&lt;li&gt;Segment your tests.&lt;/li&gt;
&lt;li&gt;Don't use setupClass() or tearDownClass()&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="talks"></category></entry></feed>